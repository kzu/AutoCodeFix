<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="ResolveLocalAssemblies" AssemblyFile="AutoCodeFix.Tasks.dll" />
  <UsingTask TaskName="RecordAutoFixWarnings" AssemblyFile="AutoCodeFix.Tasks.dll" />
  <UsingTask TaskName="CollectAutoFixWarnings" AssemblyFile="AutoCodeFix.Tasks.dll" />
  <UsingTask TaskName="ApplyCodeFixes" AssemblyFile="AutoCodeFix.Tasks.dll" />

  <PropertyGroup>
    <!-- When writing the .ini file, take into consideration the different line endings depending on the OS -->
    <_NewLineSeparator Condition="'$(OS)' == 'Windows_NT'">%0d</_NewLineSeparator>
    <_NewLineSeparator>$(_NewLineSeparator)%0a</_NewLineSeparator>
    
    <!-- A special case of the $(AutoCodeFixBeforeCompile) property occurs when code fixers run by the IDE 
         detect early on at design-time that AutoCodeFix diagnostics are present in the code. This means 
         that a second compilation can be avoided by flagging this fact to the targets, so that they do 
         the analysis and code fixing before Compile runs, since it's known that some code will need fixing.
         CodeFixProviders can properly write this file by accessing the analyzer options to inspect the 
         $(IntermediateOutputPath) to write the file to the right location.
    -->
    <_AutoCodeFixBeforeCompileFlag>$(IntermediateOutputPath)AutoCodeFixBeforeCompile.flag</_AutoCodeFixBeforeCompileFlag>
  </PropertyGroup>

  <ItemGroup>
    <AutoCodeFixAssemblySearchPath Include="$(MSBuildBinPath)" />
    <!-- All of the roslyn dependencies that we know to work for the current version of AutoCodeFix 
         are included in the tools folder. Using the VS version of Roslyn workspace APIs is risky 
         since they may (and have!) introduce breaking changes that cause the workspace to fail to 
         load, or CodeFixProvider to fail to load (i.e. StyleCop.Analyzers doesn't load under 15.9).
    -->
    <AutoCodeFixAssemblySearchPath Include="$(MSBuildThisFileDirectory)..\tools" />
  </ItemGroup>

  <Target Name="_ValidateAutoFixNoWarn" BeforeTargets="Compile" Condition="'$(NoWarn)' != ''">
    <ItemGroup>
      <NoWarnAutoFix Include="@(AutoFix)" Condition="$(NoWarn.Contains('%(Identity)'))" />
    </ItemGroup>
    <Warning Code="ACF009" Text="Auto fix %(NoWarnAutoFix.Identity} is included in the NoWarn property and therefore cannot not be fixed."
             Condition="'@(NoWarnAutoFix)' != ''"/>
  </Target>

  <!-- This target will run if AutoCodeFixBeforeCompile==true or when the IDE-run code fixers signal 
       that fixable diagnostics were produced by creating the $(_ApplyCodeFixesFlag) file -->
  <Target Name="_ApplyCodeFixBeforeCompile" 
          BeforeTargets="CoreCompile" 
          Condition="'$(DesignTimeBuild)' != 'true' and 
                    ('$(AutoCodeFixBeforeCompile)' == 'true' or Exists('$(_AutoCodeFixBeforeCompileFlag)'))">

    <SetAutoCodeFixEnvironment DesignTimeBuild="$(DesignTimeBuild)" />
    <ResolveLocalAssemblies Condition="'@(AutoFix)' != ''" />

    <ResolveCodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' != '' and ('$(Language)' == 'C#' or '$(Language)' == 'VB')"
                                CodeAnalysisRuleSet="$(CodeAnalysisRuleSet)"
                                CodeAnalysisRuleSetDirectories="$(CodeAnalysisRuleSetDirectories)"
                                MSBuildProjectDirectory="$(MSBuildProjectDirectory)">
      <Output TaskParameter="ResolvedCodeAnalysisRuleSet" PropertyName="ResolvedCodeAnalysisRuleSet" />
      <Output TaskParameter="ResolvedCodeAnalysisRuleSet" ItemName="CustomAdditionalCompileInputs" />
    </ResolveCodeAnalysisRuleSet>

    <ApplyCodeFixes ProjectFullPath="$(MSBuildProjectFullPath)"
                    ToolsPath="$(AutoCodeFixToolsPath)"
                    AssemblySearchPath="@(AutoCodeFixAssemblySearchPath)"
                    MSBuildBinPath="$(MSBuildBinPath)"
                    DebugAutoCodeFix="$(DebugAutoCodeFix)"
                    DebugProjectReader="$(DebugProjectReader)"
                    Analyzers="@(Analyzer);@(CodeFix)"
                    AdditionalFiles="@(AdditionalFiles);$(_AutoCodeFixIni)"
                    AutoFixIds="@(AutoFix)"
                    NoWarn="$(NoWarn)"
                    WarningsAsErrors="$(WarningsAsErrors)"
                    CodeAnalysisRuleSet="$(ResolvedCodeAnalysisRuleSet)"
                    BuildingInsideVisualStudio="$(BuildingInsideVisualStudio)"
                    Condition="'@(AutoFix)' != ''" />

    <Delete Files="$(_AutoCodeFixBeforeCompileFlag)" Condition="'@(AutoFix)' != ''" />

    <PropertyGroup>
      <!-- Flag to the Record/Collect targets to skip running. -->
      <_AutoCodeFixesApplied>true</_AutoCodeFixesApplied>
    </PropertyGroup>

    <CallTarget Targets="AfterAutoCodeFix" />

  </Target>

  <!-- In order to detect fixable diagnostics, we set up a logger that records diagnostics emitted by 
       the CoreCompile (csc/vbc) run. This target sets up the logger and keeps track of invocations. -->
  <Target Name="_RecordAutoFixWarnings" BeforeTargets="CoreCompile" Condition="'$(_AutoCodeFixesApplied)' != 'true'">
    <RecordAutoFixWarnings AutoFixIds="@(AutoFix)" ProjectFile="$(MSBuildProjectFullPath)" Condition="'@(AutoFix)' != ''" />
  </Target>

  <!-- This target runs after CoreCompile and picks up the recorded warnings, and cleans up the logger hookup. 
       Note that we can condition the target on '@(AutoFix)' != '' unlike the record target, since by the time 
       this target runs, the _DisableAutoCodeFix has already finished, potentially clearing out the item group
       if DisableAutoCodeFix==true.
  -->
  <Target Name="_CollectAutoFixWarnings" Returns="@(AutoFixWarning)" AfterTargets="CoreCompile" Condition="'@(AutoFix)' != '' and '$(_AutoCodeFixesApplied)' != 'true'">
    <CollectAutoFixWarnings ProjectFile="$(MSBuildProjectFullPath)">
      <Output TaskParameter="AutoFixWarnings" ItemName="AutoFixWarning" />
    </CollectAutoFixWarnings>
  </Target>

  <!-- Ties together the Collect and Apply targets. -->
  <Target Name="_ApplyCodeFixes" AfterTargets="CoreCompile" Condition="'$(_AutoCodeFixesApplied)' != 'true'" DependsOnTargets="_CollectAutoFixWarnings;_ApplyCodeFixAfterCompile" />
  
  <!-- This target is similar to _ApplyCodeFixBeforeCompile, but since it's run after CoreCompile (see above), 
       if any @(AutoFixWarning) was collected, it needs to run CoreCompile again on the same project, but this 
       time making sure it doesn't run again (to avoid infinite recursion).         
  -->
  <Target Name="_ApplyCodeFixAfterCompile" Condition="'@(AutoFixWarning)' != ''">

    <ItemGroup>
      <!-- To aid in diagnosing what's been collected, log the distinct warning messages -->
      <AutoFixWarningMessage Include="@(AutoFixWarning -> '%(Identity): %(Message)')" />
      <DistinctAutoFixMessage Include="@(AutoFixWarningMessage -> Distinct())" />
    </ItemGroup>

    <Message Importance="low" Text="Applying automatic code fixes for diagnostis:
@(DistinctAutoFixMessage -> '%(Identity)', '$(_NewLineSeparator)')" />

    <!-- If there were warnings, we need to run the code fixers, and invoke compile 
         again, this time the warnings should be errors, since it means a fixable 
         diagnostics didn't get fixed. 
         
         Note that, unlike the _ApplyCodeFixBeforeCompile target, we don't need to 
         condition these tasks with @(AutoFix)!='' since the _CollectAutoFixWarnings target 
         is already conditioned that way, meaning in that case there would be no @(AutoFixWarning) 
         and the entire target won't run. />
    -->

    <SetAutoCodeFixEnvironment DesignTimeBuild="$(DesignTimeBuild)" />
    <ResolveLocalAssemblies />

    <ResolveCodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' != '' and ('$(Language)' == 'C#' or '$(Language)' == 'VB')"
                                CodeAnalysisRuleSet="$(CodeAnalysisRuleSet)"
                                CodeAnalysisRuleSetDirectories="$(CodeAnalysisRuleSetDirectories)"
                                MSBuildProjectDirectory="$(MSBuildProjectDirectory)">
      <Output TaskParameter="ResolvedCodeAnalysisRuleSet" PropertyName="ResolvedCodeAnalysisRuleSet" />
      <Output TaskParameter="ResolvedCodeAnalysisRuleSet" ItemName="CustomAdditionalCompileInputs" />
    </ResolveCodeAnalysisRuleSet>

    <ApplyCodeFixes ProjectFullPath="$(MSBuildProjectFullPath)"
                    ToolsPath="$(AutoCodeFixToolsPath)"
                    AssemblySearchPath="@(AutoCodeFixAssemblySearchPath)"
                    MSBuildBinPath="$(MSBuildBinPath)"
                    DebugAutoCodeFix="$(DebugAutoCodeFix)"
                    DebugProjectReader="$(DebugProjectReader)"
                    Analyzers="@(Analyzer);@(CodeFix)"
                    AdditionalFiles="@(AdditionalFiles);$(_AutoCodeFixIni)"
                    AutoFixIds="@(AutoFix)"
                    NoWarn="$(NoWarn)"
                    WarningsAsErrors="$(WarningsAsErrors)"
                    CodeAnalysisRuleSet="$(ResolvedCodeAnalysisRuleSet)"
                    BuildingInsideVisualStudio="$(BuildingInsideVisualStudio)" />

    <!-- Make sure we build as little as possible here, specifying not to build project 
         references again, skipping this target, and considering @(AutoFix) warnings as 
         errors (see_SetAutoFixWarningsAsErrors) -->
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="Compile"
             Properties="AutoFixWarningsAsErrors=true;DisableAutoCodeFix=true;BuildProjectReferences=false"
             />

    <CallTarget Targets="AfterAutoCodeFix" />

  </Target>

</Project>