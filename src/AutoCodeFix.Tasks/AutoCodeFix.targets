<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="ResolveLocalAssemblies" AssemblyFile="AutoCodeFix.Tasks.dll" />
  <UsingTask TaskName="RecordAutoCodeFixWarnings" AssemblyFile="AutoCodeFix.Tasks.dll" />
  <UsingTask TaskName="CollectAutoCodeFixWarnings" AssemblyFile="AutoCodeFix.Tasks.dll" />
  <UsingTask TaskName="ApplyCodeFixes" AssemblyFile="AutoCodeFix.Tasks.dll" />
  <UsingTask TaskName="SetAutoCodeFixEnvironment" AssemblyFile="AutoCodeFix.Tasks.dll" />

  <PropertyGroup>
    <!-- AutoCodeFix, by default, will not run at all unless Compile emits warnings that have 
       a corresponding @(AutoCodeFix) item. This is typically the desired behavior, since 
       most code fixes will be applied directly in the IDE as the developer builds the code.
       
       When matching warnings are found, however, the code needs to be loaded, analyzed, 
       those same diagnostics need to be produced, the code fixes applied, and then another 
       Compile must run so that the updated code is included in the final output. 
       
       Compiling twice is arguably worse than compiling once :), which is precisely what the 
       $(AutoCodeFixBeforeCompile) controls. When set to 'true', this property will cause 
       analyis and code fix to run always before compile, therefore reducing the Compile 
       execution to just one. Of course, the trade-off is that now, if no diagnostics needed 
       code fixing, the whole code loading and analysis was unnecessary, slowing down the 
       build too. 

       Packages that use AutoCodeFix to generate code into the intermediate output path 
       may want to opt-in to this behavior, however, since it guarantees that generated 
       code is always up-to-date by the time Compile runs.
  -->
    <AutoCodeFixBeforeCompile Condition="'$(AutoCodeFixBeforeCompile)' == ''">false</AutoCodeFixBeforeCompile>

    <!-- Disables all AutoCodeFix behavior, to compare before/after build performance, for example. -->
    <DisableAutoCodeFix Condition="'$(DisableAutoCodeFix)' == ''">false</DisableAutoCodeFix>

    <!-- Launches a debugger before executing the AutoCodeFix task, for troubleshooting/diagnostics purposes -->
    <DebugAutoCodeFix Condition="'$(DebugAutoCodeFix)' == ''">false</DebugAutoCodeFix>
    <!-- Launches a debugger when starting the ProjectReader console app, for troubleshooting/diagnostics purposes -->
    <DebugProjectReader Condition="'$(DebugProjectReader)' == ''">false</DebugProjectReader>

    <!-- Path to the ProjectReader executable and its dependencies. -->
    <AutoCodeFixToolsPath Condition="'$(AutoCodeFixToolsPath)' == ''">$(MSBuildThisFileDirectory)..\tools</AutoCodeFixToolsPath>

    <!-- Logging verbosity for tracing -->
    <AutoCodeFixVerbosity Condition="'$(AutoCodeFixVerbosity)' == ''">Normal</AutoCodeFixVerbosity>

    <!-- This file contains a key=value per line, serialized from @(AutoCodeFixSetting) items -->
    <_AutoCodeFixIni>$(IntermediateOutputPath)AutoCodeFix.ini</_AutoCodeFixIni>
  </PropertyGroup>

  <!-- These targets ensure the $(DesignTimeBuild) property is always set and can be relied on -->
  <Import Project="AutoCodeFix.DesignTime.targets"/>
  <Import Project="AutoCodeFix.Core.targets" Condition="'$(DisableAutoCodeFix)' != 'true'" />

  <!-- Persists settings for the code fixers to know the intermediate output path or other values from the project.
       Unlike the other "private" targets that start with "_", this target is intended for public consumption in 
       BeforeTargets, so that dynamically calculated @(AutoCodeFixSetting) can be added before the save happens. 
       
       Note, however, that the incremental build will only consider $(MSBuildAllProjects) by default. If the custom 
       settings are calculated from other files that need to be added to the incremental runs of this target, append 
       them to the $(AdditionalAutoCodeFixSettingsInputs) property.
  -->
  <Target Name="SaveAutoCodeFixSettings"
          BeforeTargets="_ApplyCodeFixBeforeCompile;_ApplyCodeFixAfterCompile;Compile;CompileDesignTime"
          Inputs="$(MSBuildAllProjects);$(AdditionalAutoCodeFixSettingsInputs)" 
          Outputs="$(_AutoCodeFixIni)">

    <ItemGroup>
      <!-- These values are always persisted, since they are generally useful. -->
      <AutoCodeFixSetting Include="BaseIntermediateOutputPath" Value="$([MSBuild]::NormalizeDirectory($(BaseIntermediateOutputPath)))" />
      <AutoCodeFixSetting Include="IntermediateOutputPath" Value="$([MSBuild]::NormalizeDirectory($(IntermediateOutputPath)))" />
      <AutoCodeFixSetting Include="AutoCodeFix" Value="@(AutoCodeFix)" />
    </ItemGroup>

    <MakeDir Directories="$(IntermediateOutputPath)" Condition="!Exists('$(IntermediateOutputPath)')" />

    <WriteLinesToFile File="$(_AutoCodeFixIni)" Overwrite="true" 
                      Lines="@(AutoCodeFixSetting -> '%(Identity)=%(Value)', '$(_NewLineSeparator)')" />
    <ItemGroup>
      <FileWrites Include="$(_AutoCodeFixIni)" />
      <!-- By adding the file to @(AdditionalFiles), we get it passed automatically to code fixes in the IDE 
           as well as to our invocations to ApplyCodeFixes task. -->
      <AdditionalFiles Include="$(_AutoCodeFixIni)" />
    </ItemGroup>
  </Target>

  <!-- When we explicitly invoke MSBuild from _ApplyCodeFixAfterCompile after applying the code fixes, we want 
       to force the compilers to consider the auto-fixable diagnostics as errors, since their presence will indicate 
       that the diagnostic could not be auto-fixed. TODO: maybe provide a better error message in that case somehow? -->
  <Target Name="_SetAutoCodeFixWarningsAsErrors" BeforeTargets="CoreCompile" Condition="'$(AutoCodeFixWarningsAsErrors)' == 'true'">
    <PropertyGroup>
      <WarningsAsErrors>$(WarningsAsErrors);@(AutoCodeFix)</WarningsAsErrors>
    </PropertyGroup>
  </Target>

</Project>