<Project TreatAsLocalProperty="GitBaseVersion">

  <PropertyGroup>
    <GitThisAssemblyMetadata>false</GitThisAssemblyMetadata>
    <GitSkipCache>true</GitSkipCache>
  </PropertyGroup>

  <PropertyGroup>
    <GenerateNuspecDependsOn>SetVersions;$(GenerateNuspecDependsOn)</GenerateNuspecDependsOn>
    <GetPackageVersionDependsOn>SetVersions;$(GetPackageVersionDependsOn)</GetPackageVersionDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <GitBranch Condition="'$(SYSTEM_PULLREQUEST_TARGETBRANCH)' != ''">$(SYSTEM_PULLREQUEST_TARGETBRANCH)</GitBranch>
    <GitBranch Condition="'$(SYSTEM_PULLREQUEST_TARGETBRANCH)' == '' and '$(BUILD_SOURCEBRANCHNAME)' != ''">$(BUILD_SOURCEBRANCHNAME)</GitBranch>
  </PropertyGroup>

  <Target Name="SetVersions"
          BeforeTargets="PrepareForBuild;GetAssemblyVersion;GetAssemblyAttributes;GetPackageVersion;Pack;"
          DependsOnTargets="GitVersion"
          Returns="$(Version)"
          Condition="'$(GitInfoImported)' == 'true' And '$(ExcludeRestorePackageImports)' != 'true'">

    <ItemGroup>
      <VersionMetadata Include="pr.$(SYSTEM_PULLREQUEST_PULLREQUESTNUMBER)" Condition="$(CI) and '$(SYSTEM_PULLREQUEST_PULLREQUESTNUMBER)' != ''" />
      <VersionMetadata Include="sha.$(GitCommit)" />
      <VersionMetadata Include="azdo.$(BUILD_BUILDID)" Condition="$(CI)" />
    </ItemGroup>

    <PropertyGroup>
      <VersionMetadata>+@(VersionMetadata -> '%(Identity)', '-')</VersionMetadata>
    </PropertyGroup>

    <PropertyGroup Label="Stable" Condition="'$(GitSemVerLabel)' == ''">
      <!-- If we're building a stable version, increment patch with commits as provided by the SemVer properties -->
      <VersionPrefix>$(GitSemVerPatch).$(GitSemVerPatch).$(GitSemVerPatch)</VersionPrefix>
      <VersionSuffix>$(VersionMetadata)</VersionSuffix>
    </PropertyGroup>

    <PropertyGroup Label="Prerelease" Condition="'$(GitSemVerDashLabel)' != ''">
      <!-- Otherwise, we'll use the base version number and add the commits to the pre-release label -->
      <VersionPrefix>$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitBaseVersionPatch)</VersionPrefix>
      <VersionSuffix Condition="'$(GitCommits)' == '0'">$(GitSemVerDashLabel)$(VersionMetadata)</VersionSuffix>
      <VersionSuffix Condition="'$(GitCommits)' != '0'">$(GitSemVerDashLabel).$(GitCommits)$(VersionMetadata)</VersionSuffix>
    </PropertyGroup>

    <PropertyGroup>
      <PackageVersion>$(VersionPrefix)$(VersionSuffix)</PackageVersion>
      <Version>$(VersionPrefix)</Version>
      <AssemblyVersion>$(VersionPrefix)</AssemblyVersion>
      <FileVersion>$(VersionPrefix).$(GitCommits)</FileVersion>
      <InformationalVersion>$(Version)</InformationalVersion>
    </PropertyGroup>

    <ItemGroup>
      <AssemblyAttribute Include="System.Reflection.AssemblyMetadata">
        <_Parameter1>Version</_Parameter1>
        <_Parameter2>$(Version)</_Parameter2>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyMetadata">
        <_Parameter1>PackageVersion</_Parameter1>
        <_Parameter2>$(PackageVersion)</_Parameter2>
      </AssemblyAttribute>
    </ItemGroup>

    <Message Condition="$(CI)" Importance="high" Text="##vso[build.updatebuildnumber]$(GitBranch)$(VersionMetadata)"/>
  </Target>

  <Target Name="_ReplaceBaseVersionWithRoslynVersion" BeforeTargets="_GitPopulateVersionInfo">
    <PropertyGroup>
      <GitBaseVersion Condition="'$(ReleaseLabel)' == '' and $(CI)">$(RoslynVersion)</GitBaseVersion>
      <!-- Clearly mark local builds -->
      <GitBaseVersion Condition="'$(ReleaseLabel)' == '' and !$(CI)">$(RoslynVersion)-dev</GitBaseVersion>
      <GitBaseVersion Condition="'$(ReleaseLabel)' != ''">$(RoslynVersion)-$(ReleaseLabel)</GitBaseVersion>
    </PropertyGroup>
  </Target>
  
</Project>
