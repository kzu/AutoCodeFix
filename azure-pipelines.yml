trigger:
  batch: false
  branches:
    include:
    - master
    - features/*
    - releases/*
    - dev/*
  paths:
    exclude:
    - docs
pr:
  - master
  - features/*
  - releases/*

variables:
- group: Sleet
- name: Configuration
  value: Release
- name: ReleaseLabel
  value: beta

stages:

- stage: Build2017
  dependsOn: []
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-2019'
    steps:
    - checkout: self
      clean: true

    - template: azure-build.yml
      parameters:
        roslyn: '2.10.0'

- stage: Build2019_3_0
  dependsOn: []
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-2019'
    steps:
    - checkout: self
      clean: true

    - template: azure-build.yml
      parameters:
        roslyn: '3.0.0'

- stage: Build2019_3_1
  dependsOn: []
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-2019'
    steps:
    - checkout: self
      clean: true

    - template: azure-build.yml
      parameters:
        roslyn: '3.1.0'

- stage: Deploy
  dependsOn:
  - Build2017
  - Build2019_3_0
  - Build2019_3_1
  variables:
  - name: SleetVersion
    value: 2.3.33
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'windows-2019'
    environment: sleet
    strategy:
      runOnce:
        deploy:
          steps:
          - pwsh: |
             $anyinstalled = (dotnet tool list -g | select-string sleet) -ne $null
             Write-Host "##vso[task.setvariable variable=Sleet.AnyInstalled;]$anyinstalled"
   
             $sameinstalled = (dotnet tool list -g | select-string sleet | select-string $(SleetVersion)) -ne $null
             Write-Host "##vso[task.setvariable variable=Sleet.SameInstalled;]$sameinstalled"
            displayName: 'Check Sleet installed version'

          - task: DotNetCoreCLI@2
            displayName: 'Uninstall Sleet if necessary'
            continueOnError: true
            condition: and(eq(variables['Sleet.AnyInstalled'], 'True'), eq(variables['Sleet.SameInstalled'], 'False'))
            inputs:
              command: custom
              custom: tool
              arguments: 'uninstall -g Sleet'

          - task: DotNetCoreCLI@2
            displayName: 'Install Sleet if necessary'
            condition: eq(variables['Sleet.SameInstalled'], 'False')
            inputs:
              command: custom
              custom: tool
              arguments: 'install --global Sleet --version $(SleetVersion)'

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: packages

          - script: 'sleet push --config none $(Pipeline.Workspace)/packages -f --verbose -p "SLEET_FEED_CONNECTIONSTRING=$(SLEET_FEED_CONNECTIONSTRING)"'
            displayName: 'Push package via Sleet'